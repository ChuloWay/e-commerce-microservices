version: '3.8'

services:
  # MongoDB Database - CI version without authentication
  mongodb:
    image: mongo:7.0
    container_name: ecommerce-mongodb-ci
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: ecommerce
    networks:
      - ecommerce-network

  # RabbitMQ Message Broker - CI version without authentication
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: ecommerce-rabbitmq-ci
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Customer Service
  customer-service:
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    container_name: ecommerce-customer-service-ci
    environment:
      PORT: 3001
      MONGO_URI: mongodb://mongodb:27017/ecommerce_customers
      NODE_ENV: test
    ports:
      - "3001:3001"
    depends_on:
      mongodb:
        condition: service_started
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: ecommerce-product-service-ci
    environment:
      PORT: 3002
      MONGO_URI: mongodb://mongodb:27017/ecommerce_products
      NODE_ENV: test
    ports:
      - "3002:3002"
    depends_on:
      mongodb:
        condition: service_started
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: ecommerce-order-service-ci
    environment:
      PORT: 3003
      MONGO_URI: mongodb://mongodb:27017/ecommerce_orders
      CUSTOMER_SERVICE_URL: http://customer-service:3001
      PRODUCT_SERVICE_URL: http://product-service:3002
      PAYMENT_SERVICE_URL: http://payment-service:3004
      NODE_ENV: test
    ports:
      - "3003:3003"
    depends_on:
      mongodb:
        condition: service_started
      customer-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      payment-service:
        condition: service_started
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Payment Service
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: ecommerce-payment-service-ci
    environment:
      PORT: 3004
      MONGO_URI: mongodb://mongodb:27017/ecommerce_payments
      RABBITMQ_URL: amqp://rabbitmq:5672
      NODE_ENV: test
    ports:
      - "3004:3004"
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3004/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Transaction Worker
  transaction-worker:
    build:
      context: ./transaction-worker
      dockerfile: Dockerfile
    container_name: ecommerce-transaction-worker-ci
    environment:
      MONGO_URI: mongodb://mongodb:27017/ecommerce_transactions
      RABBITMQ_URL: amqp://rabbitmq:5672
      NODE_ENV: test
    depends_on:
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network

  # Database Seeding Service
  seed-databases:
    build:
      context: ./scripts
      dockerfile: Dockerfile
    container_name: ecommerce-seed-databases-ci
    environment:
      MONGO_URI: mongodb://mongodb:27017/ecommerce_customers
      CUSTOMER_SERVICE_URL: http://customer-service:3001
      PRODUCT_SERVICE_URL: http://product-service:3002
    depends_on:
      mongodb:
        condition: service_started
      customer-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
    networks:
      - ecommerce-network
    profiles:
      - seeding

networks:
  ecommerce-network:
    driver: bridge

volumes:
  mongodb_data:
  rabbitmq_data:
